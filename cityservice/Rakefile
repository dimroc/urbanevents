require 'elasticsearch/persistence'
require 'active_support/all'
GO_ENV = ENV['GO_ENV'].presence || 'development'

repository = Elasticsearch::Persistence::Repository.new do
  # Configure the Elasticsearch client
  client Elasticsearch::Client.new url: ENV['ELASTICSEARCH_URL'], log: true

  # Set a custom index name
  index "#{GO_ENV}-ntc-geoevents"

  # TODO: Create timestamped index and then make alias

  # Set a custom document type
  type  :tweet

  settings do
    mapping do
      indexes :createdAt, type: 'date'
      indexes :payload, analyzer: 'snowball'
      indexes :city, type: 'string', index: 'not_analyzed'
      indexes :metadata, type: 'object' do
        indexes :screenName, type: 'string'
        indexes :hashtags, type: 'string'
        indexes :mediaTypes, type: 'string', index: 'not_analyzed'
        indexes :mediaUrls, type: 'string', index: 'not_analyzed'
      end

      indexes :geojson, type: 'geo_shape'
      indexes :point, type: 'geo_point'

      # Rest of the attributes are created lazily
    end
  end
end

namespace :elasticsearch do
  def backup_repository_name
    "urban-events"
  end

  task :recreate_index do
    raise StandardError, "ELASTICSEARCH_URL must be set" unless ENV['ELASTICSEARCH_URL'].present?
    repository.create_index! force: true
  end

  task :destroy_index do
    repository.delete_index!
  end

  task :create_s3_repository do
    repository.client.snapshot.create_repository(repository: backup_repository_name,
      body: {
      "type": "s3",
      "settings": {
        "bucket": "#{GO_ENV}.urbanevents.elasticsearch",
        "region": "us-east",
        "access_key": ENV['AWS_ACCESS_KEY_ID'],
        "secret_key": ENV['AWS_SECRET_ACCESS_KEY']
      }
    })
  end

  task :create_fs_repository do
    repository.client.snapshot.create_repository(repository: backup_repository_name,
      body: {
      type: 'fs',
      settings: { location: '/tmp/elasticsearch-backups', compress: true  }
    })
  end

  task :snapshot do
    timestamp = Time.now.strftime("%Y%m%d-%H%M%S")
    repository.client.snapshot.create repository: backup_repository_name, snapshot: "cityservice-#{timestamp}"
  end
end
