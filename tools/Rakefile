require 'elasticsearch/persistence'
require 'active_support/all'
GO_ENV = ENV['GO_ENV'].presence || 'development'

repository = Elasticsearch::Persistence::Repository.new do
  # Configure the Elasticsearch client
  client Elasticsearch::Client.new url: ENV['ELASTICSEARCH_URL'], log: true

  # Set a custom index name
  index "#{GO_ENV}-geoevents-#{Time.now.strftime("%Y%m%d-%H%M%S")}"

  # Set a custom document type
  type  :tweet

  settings number_of_shards: 3 do
    mapping do
      indexes :createdAt, type: 'date'
      indexes :payload, analyzer: 'snowball'
      indexes :city, type: 'string', index: 'not_analyzed'
      indexes :metadata, type: 'object' do
        indexes :screenName, type: 'string'
        indexes :hashtags, type: 'string'
        indexes :mediaTypes, type: 'string', index: 'not_analyzed'
        indexes :mediaUrls, type: 'string', index: 'not_analyzed'
        indexes :expandedUrls, type: 'string', index: 'not_analyzed'
      end

      indexes :geojson, type: 'geo_shape', "tree": "quadtree", "precision": "1m"
      indexes :point, type: 'geo_point', geo_hash: true, geohash_prefix: true, geohash_precision: '1m'

      # Rest of the attributes are created lazily
    end
  end
end

namespace :es do
  def backup_repository_name
    "urbanevents"
  end

  def es_alias
    "#{GO_ENV}-geoevents"
  end

  task :hello do
    puts "FUCK OFF"
  end

  task :create_index do
    raise StandardError, "ELASTICSEARCH_URL must be set" unless ENV['ELASTICSEARCH_URL'].present?
    repository.create_index!
  end

  task :destroy_test_indices do
    repository.client.indices.delete index: 'test-geo*'
  end

  task :bootstrap => [:create_index_and_alias]
  task :create_index_and_alias do
    repository.create_index!
    repository.client.indices.put_alias index: repository.index, name: es_alias
  end

  task :set_alias do
    old_index = ENV['OLD_INDEX']
    new_index = ENV['NEW_INDEX']

    if old_index.present?
      repository.client.indices.update_aliases body: {
        actions: [
          { remove: { index: old_index, alias: es_alias } },
          { add:    { index: new_index, alias: es_alias } }
        ]
      }
    else
      repository.client.indices.put_alias index: new_index, name: es_alias
    end
  end

  task :create_s3_repository do
    repository.client.snapshot.create_repository(repository: backup_repository_name,
      body: {
      "type": "s3",
      "settings": {
        "bucket": "#{GO_ENV}.urbanevents.elasticsearch",
        "region": "us-east",
        "access_key": ENV['AWS_ACCESS_KEY_ID'],
        "secret_key": ENV['AWS_SECRET_ACCESS_KEY']
      }
    })
  end

  task :create_fs_repository do
    repository.client.snapshot.create_repository(repository: backup_repository_name,
      body: {
      type: 'fs',
      settings: { location: '/tmp/elasticsearch-backups', compress: true  }
    })
  end

  task :snapshot do
    timestamp = Time.now.strftime("%Y%m%d-%H%M%S")
    repository.client.snapshot.create repository: backup_repository_name, snapshot: "cityservice-#{timestamp}"
  end

  task :restore do
    snapshot = ENV['SNAPSHOT']
    repository.client.snapshot.restore repository: backup_repository_name, snapshot: snapshot
  end
end
